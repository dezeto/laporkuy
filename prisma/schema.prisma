// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id             String    @id @default(cuid())
    name           String?
    email          String?   @unique
    enrolled_image String?
    emailVerified  DateTime?
    image          String?
    accounts       Account[]
    sessions       Session[]
    comments       Comment[]
    votes          Vote[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Post {
    id          String     @id @default(cuid())
    postId      String?
    title       String
    label       String[]
    description String?
    photos      String[]
    happened_at DateTime
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
    fraudster   Fraudster?
    comment     Comment[]
    votes       Vote[]
}

model Fraudster {
    id          String   @id @default(cuid())
    postId      String   @unique
    name        String
    phoneNumber String?
    address     String?
    bankAccount String?
    photo       String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Comment {
    id        String   @id @default(cuid())
    postId    String
    userId    String
    content   String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Vote {
    postId    String
    userId    String
    isUpVote  Boolean
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id(fields: [userId, postId], name: "voteId")
}
